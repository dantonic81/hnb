# local development
version: '3'

x-common-service-config: &common-service-config
  restart: unless-stopped

services:
#  minio:
#    image: minio/minio:latest
#    container_name: minio
#    ports:
#      - "49000:9000"
#      - "49001:9001"
#    volumes:
#      - minio_storage:/data
#    environment:
#      MINIO_ROOT_USER: root
#      MINIO_ROOT_PASSWORD: 1234567890
#    command: server --console-address ":9001" /data
#    healthcheck:
#      test: ["CMD", "timeout", "5s", "bash", "-c", ":> /dev/tcp/127.0.0.1/9000 || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 2
#    depends_on:
#      - dwh
#    <<: *common-service-config


  dwh:
    container_name: dwh
    image: postgres:11-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - docker_example_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dwh -d hnb" ]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *common-service-config

#  etl:
#    container_name: etl
#    build:
#      context: .
#      dockerfile: ./src/Dockerfile
#    env_file:
#      - .env
#    healthcheck:
#      test: ["CMD-SHELL", "python --version"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#    depends_on:
#      - minio
#      - dwh
#    command: bash -c "while true; do python src/main.py; sleep 60; done"
#    <<: *common-service-config

  docker_example_user_code:
    build:
      context: .
      dockerfile: ./Dockerfile_user_code
    container_name: docker_example_user_code
    image: docker_example_user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "dwh"
      DAGSTER_POSTGRES_PASSWORD: "dwh"
      DAGSTER_POSTGRES_DB: "hnb"
      DAGSTER_CURRENT_IMAGE: "docker_example_user_code_image"
    networks:
      - docker_example_network

  docker_example_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_example_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "dwh"
      DAGSTER_POSTGRES_PASSWORD: "dwh"
      DAGSTER_POSTGRES_DB: "hnb"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      - dwh
      - docker_example_user_code

  docker_example_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "dwh"
      DAGSTER_POSTGRES_PASSWORD: "dwh"
      DAGSTER_POSTGRES_DB: "hnb"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      - dwh
      - docker_example_user_code

volumes:
  minio_storage: {}
  postgres_data: {}

networks:
  docker_example_network:
    driver: bridge
    name: docker_example_network
